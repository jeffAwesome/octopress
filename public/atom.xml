<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeff Richardson]]></title>
  <link href="http://jeffawesome.com/atom.xml" rel="self"/>
  <link href="http://jeffawesome.com/"/>
  <updated>2013-08-01T00:09:12-05:00</updated>
  <id>http://jeffawesome.com/</id>
  <author>
    <name><![CDATA[Jeff Richardson]]></name>
    <email><![CDATA[jeff@masterpieceinteractive.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning on the fly]]></title>
    <link href="http://jeffawesome.com/blog/2013/07/31/learning-on-the-fly/"/>
    <updated>2013-07-31T23:22:00-05:00</updated>
    <id>http://jeffawesome.com/blog/2013/07/31/learning-on-the-fly</id>
    <content type="html"><![CDATA[<p>I&#8217;ve made a dramatic change in my career over the past few months. I went from completely front end development to a focus on the full stack.
Throughout my career I have always dabbled a bit in the backend changing a few lines of codes in php and then uploading them to the server via ssh or ftp, but
this is a whole new ball game. Each day I experiment and learn something new. Its 100% frustrating but get this <strong> I love it </strong>.</p>

<p>I&#8217;ve been working as a web developer professionally since 2008, I was 19 then, and i&#8217;m 24 now. One thing I experienced that first year and a half of my
career was this extreme learning growth spurt. I remember being completely lost but eventually I would figure it out. It wasn&#8217;t always easy,
I had to develop with ie 6 compatability in mind, but at the end of the day I would always have a sense of accomplishment. I don&#8217;t want anyone to
think I stumbled upon this field with no knowledge I had a fundamental understanding of html and css and layouts back then before jumping in,
but it wasn&#8217;t until I jumped into developing site after site that I really started to exercise this knowledge and put it to the test.</p>

<p>Fast forward to today. I&#8217;ve been working as a full stack developer and I feel I&#8217;m back at the beginning of the learning cycle, but I think as developers
maybe that&#8217;s the most appropriate place for us to be. I speak from experience when I say its extermely easy to get stuck in this idea of a label. Were
a front end developer, or a designer, or a programmer. It takes a large amount of work and dedication to learning something new and its extremely
frustrating at first, and maybe always.. isn&#8217;t our job about solving problems&#8230; some we&#8217;ve never had to solve before, but eventually things get easier
and you start to grasp ideas you thought you were never going to grasp. Its a wonderful feeling to finally understand, and use , an idea that you&#8217;ve
been trying to grasp for a while.</p>

<p>I know this idea of always learning isn&#8217;t new at all, but its something I truly believe in. We don&#8217;t have to be the best or the smartest but if we
always strive to learn and improve I really think we&#8217;ll always have a job&#8230; an increasingly complex job at that. I think about a quote I heard first from a pretty
cool guy <a href="http://okdork.com/">Noah Kagen</a> &#8220;If its uncomfortable, you&#8217;re growing.&#8221;. I can&#8217;t tell you how often I think about that quote,
especially when learning what at first feels awkward like learning vim, using the terminal for everything, or learning ruby and then rails within a month
period&#8230; but its extremely true. Each day things feel less awkward, but its only because I&#8217;m learning and its the normal progression. I can&#8217;t wait
to get a bit more awkward just when I think I&#8217;ve learned it all :).</p>

<p>Be Awesome</p>

<p>Jeff Richardson</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My attempt to learn Ruby Part 1]]></title>
    <link href="http://jeffawesome.com/blog/2013/05/15/my-attempt-to-learn-ruby-part-1/"/>
    <updated>2013-05-15T22:20:00-05:00</updated>
    <id>http://jeffawesome.com/blog/2013/05/15/my-attempt-to-learn-ruby-part-1</id>
    <content type="html"><![CDATA[<p>In the constantly changing area of front end web development there may be a time when you have to at the very least understand the basics of a backend language such as ruby. I am going to use a language all front end developers should know&#8230; Javascript to help me and hopefully you understand the funadmentals of ruby&#8230; lets dig in.<!--more--></p>

<h2>Understanding Ruby through Javascript</h2>

<p>When you aren&#8217;t a &#8216;true&#8217; programmer by nature learning a new language can be intimidating, especially when its a backend language&#8230; but after several hours of blindly reading I started taking notes and comparing it to a language I already know very well&#8230; Javascript. A lot of what I have below is mainly just rough notes I made from reading through the book I previously mentioned. It may not help you at all but it seems to be the trick I needed to grasp the new language.</p>

<h2>Lets start with null and nil</h2>

<p>In javascript we have null in Ruby we have nil&#8230; for the most part they are the same. And the interesting thing about it is they are both objects. Everything in ruby is an object but to test in Javascript.. simply try this in the console.</p>

<pre><code>typeof null;
/* It will return object. */
</code></pre>

<h2>Methods</h2>

<p>So far from my understanding a method in ruby is a lot like a function in javascript. Consider the following example in javascript:</p>

<pre><code>function say_goodnight(name) {
    var result = 'Good Night' + name;
    return result;
}

/* Then you could call that function like so: */

say_goodnight('John-Boy');
say_goodnight('Mary-Ellen');
</code></pre>

<p>In ruby it looks like this:</p>

<pre><code>def say_goodnight(name)
    result = 'Good night, ' + name
    return result
end

/* and you'd call it like so */

puts say_goodnight('May-Ellen')
puts say_goodnight('John-Boy')
</code></pre>

<p>In ruby the semi colons are optional as long as each statement is in a new line.</p>

<h2>Arrays and Hash</h2>

<p>Arrays in ruby and javascript are very similar</p>

<p>in javascript its</p>

<pre><code>a = [1, 'cat', 3.14];

/* You can access them in javascript with */

a[0];

/* and can assign a value like so */

a[2] = null;
</code></pre>

<p>in ruby its</p>

<pre><code>a = [1, 'cat', 3.14]
a[0]  
a[2] = nil
</code></pre>

<h3>What the heck is a hash?</h3>

<p>This was the exact thing I thought when it was first mentioned but in ruby it is very similar to an array. It looks almost identical to a Javascript object on first look. In Javascript you can define Objects, which are the closest things to an associative array for the language.</p>

<p>A javascript object</p>

<pre><code>theJsObject = {
    shoppingCart: 'shopping cart value',
    anotherSymbol: 'another value'
}

/* To Access a value with Javascript  */

theJsObject.shoppingCart
/* or */
theJsObject['shoppingCart']
/* Returns shopping cart value */
</code></pre>

<p>In Ruby a Hash looks like this:</p>

<pre><code>the_hash_example = {
    :shopping_cart =&gt; 'shopping cart value',
    :another_symbol =&gt; 'another value'
}

/* To grab a value from the hash you would simply do the following */

the_hash_example[:shopping_cart] 
/* Returns shopping cart value */
</code></pre>

<p>See how similar to a Javascript object it is? You can even grab a value in javascript an almost identical way.
I know that they aren&#8217;t the same thing but it helps me start to wrap my mind around what&#8217;s going on with ruby and some of its language fundamentals.</p>

<h2>Comparing Helps me maybe it helps you.</h2>

<p>When first reading through the code I was simply seeing the code but when I think about it and compare it to something I alredy know it does wonders&#8230; the ruby code makes so much more sense&#8230; now I understand that I am probably over simplifying what&#8217;s happening and I may even be mis-stating something and if so <strong>please let me know</strong>, but overall this is helping me grok the fundamentals of the language.</p>

<h2>Whats next?</h2>

<p>In the next post I will be going over differences and similarities with control statements between the two languages.</p>

<p>Be Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[quick way to center an absolutely positioned element]]></title>
    <link href="http://jeffawesome.com/blog/2013/05/04/quick-way-to-center-an-absolutely-positioned-element/"/>
    <updated>2013-05-04T23:39:00-05:00</updated>
    <id>http://jeffawesome.com/blog/2013/05/04/quick-way-to-center-an-absolutely-positioned-element</id>
    <content type="html"><![CDATA[<p>I find it hard to blog about technical related issues. I feel most of the time everything I have to say has already been said but this is something i&#8217;ve found a lot of my peers especially at the current company I work at weren&#8217;t aware of&#8230; its a quick way to center an absolutely positioned element.<!-- more --></p>

<p>The only real requirement for this is you need to know the width of the element. Here is an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#sampleDiv {
</span><span class='line'>  position: absolute;
</span><span class='line'>  top: 30%;
</span><span class='line'>  left: 50%;
</span><span class='line'>  margin-left: 225px;
</span><span class='line'>  width: 450px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it&#8230; you position the element left 50 percent and then create a negative margin of 1/2 the width of the element, and it works.</p>

<p>I was surprised to know that this was something a few people I work with weren&#8217;t aware of so I thought I would share just in case anyone out there isn&#8217;t aware of this technique.</p>

<ul>
<li>Be Awesome :)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[there's a million things I don't know...]]></title>
    <link href="http://jeffawesome.com/blog/2013/05/01/theres-a-million-things-i-dont-know-dot-dot-dot/"/>
    <updated>2013-05-01T20:50:00-05:00</updated>
    <id>http://jeffawesome.com/blog/2013/05/01/theres-a-million-things-i-dont-know-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I love learning&#8230; I have since I was a kid. I remember my favorite time of the year was the summer. I was out of boring school
(yeah I realize the irony of not enjoying school but loving to learn)&#8230; and at least once a week my mom would drop me off at the library. I loved going to the library and reading. A funny thing started to happen the more I would learn and pick new skills up, I would discover there were a million things I still needed to learn.<!-- more --></p>

<p>I still feel this way 10 years later. There is so much I don&#8217;t know but I love discovering and going down a new rabbit hole into another crazy world. Whether it was diving into the terminal for the first time or beginning to learn javascript and stop depending on a library&#8230; I have learned a lot but each time I start to feel confident I realize there&#8217;s a million things I still don&#8217;t know.</p>
]]></content>
  </entry>
  
</feed>
